// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: points.sql

package logisticq

import (
	"context"
	"database/sql"
)

const insertLogisticPoint = `-- name: InsertLogisticPoint :one
INSERT INTO logistic_points (title,address,lat,lon,created_at)
VALUES ($1,$2,$3,$4,now()) RETURNING id
`

type InsertLogisticPointParams struct {
	Title   string
	Address string
	Lat     sql.NullFloat64
	Lon     sql.NullFloat64
}

func (q *Queries) InsertLogisticPoint(ctx context.Context, arg InsertLogisticPointParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertLogisticPoint,
		arg.Title,
		arg.Address,
		arg.Lat,
		arg.Lon,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listLogisticPoints = `-- name: ListLogisticPoints :many
SELECT id,title,address,lat,lon,created_at FROM logistic_points ORDER BY id
`

func (q *Queries) ListLogisticPoints(ctx context.Context) ([]LogisticPoint, error) {
	rows, err := q.db.QueryContext(ctx, listLogisticPoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LogisticPoint
	for rows.Next() {
		var i LogisticPoint
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Address,
			&i.Lat,
			&i.Lon,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
