// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: shipments.sql

package logisticq

import (
	"context"
	"time"
)

const getOpenShipments = `-- name: GetOpenShipments :many
SELECT s.id,s.max_weight_kg,s.max_volume_m3,s.departure_at, p1.point_id, p2.point_id 
FROM shipments s 
JOIN LATERAL (SELECT point_id FROM route_points WHERE shipment_id=s.id AND ordinal=1 LIMIT 1) p1 ON true
JOIN LATERAL (SELECT point_id FROM route_points WHERE shipment_id=s.id AND ordinal=2 LIMIT 1) p2 ON true
WHERE s.status='PLANNED'
`

type GetOpenShipmentsRow struct {
	ID          int64
	MaxWeightKg float64
	MaxVolumeM3 float64
	DepartureAt time.Time
	PointID     int64
	PointID_2   int64
}

func (q *Queries) GetOpenShipments(ctx context.Context) ([]GetOpenShipmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOpenShipments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOpenShipmentsRow
	for rows.Next() {
		var i GetOpenShipmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.MaxWeightKg,
			&i.MaxVolumeM3,
			&i.DepartureAt,
			&i.PointID,
			&i.PointID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShipment = `-- name: GetShipment :one
SELECT id,max_weight_kg,max_volume_m3,departure_at,status,created_at FROM shipments WHERE id=$1
`

func (q *Queries) GetShipment(ctx context.Context, id int64) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, getShipment, id)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.MaxWeightKg,
		&i.MaxVolumeM3,
		&i.DepartureAt,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const insertShipment = `-- name: InsertShipment :one
INSERT INTO shipments (max_weight_kg,max_volume_m3,departure_at,status,created_at)
VALUES ($1,$2,$3,'PLANNED',now()) RETURNING id
`

type InsertShipmentParams struct {
	MaxWeightKg float64
	MaxVolumeM3 float64
	DepartureAt time.Time
}

func (q *Queries) InsertShipment(ctx context.Context, arg InsertShipmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertShipment, arg.MaxWeightKg, arg.MaxVolumeM3, arg.DepartureAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listShipments = `-- name: ListShipments :many
SELECT id,max_weight_kg,max_volume_m3,departure_at,status,created_at FROM shipments ORDER BY id DESC
`

func (q *Queries) ListShipments(ctx context.Context) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shipment
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.MaxWeightKg,
			&i.MaxVolumeM3,
			&i.DepartureAt,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipmentDeparted = `-- name: UpdateShipmentDeparted :exec
UPDATE shipments SET status='DEPARTED' WHERE id=$1
`

func (q *Queries) UpdateShipmentDeparted(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateShipmentDeparted, id)
	return err
}
