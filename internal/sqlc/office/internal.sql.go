// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: internal.sql

package officeq

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const getApplicationStatusBulk = `-- name: GetApplicationStatusBulk :many
SELECT id, status FROM applications WHERE id = ANY($1::bigint[]) ORDER BY id
`

type GetApplicationStatusBulkRow struct {
	ID     int64
	Status string
}

func (q *Queries) GetApplicationStatusBulk(ctx context.Context, dollar_1 []int64) ([]GetApplicationStatusBulkRow, error) {
	rows, err := q.db.QueryContext(ctx, getApplicationStatusBulk, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApplicationStatusBulkRow
	for rows.Next() {
		var i GetApplicationStatusBulkRow
		if err := rows.Scan(&i.ID, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAvailableForRoute = `-- name: ListAvailableForRoute :many
SELECT a.id, g.total_weight, g.total_volume, a.pickup_point_id, a.dropoff_point_id, a.created_at
FROM applications a
JOIN cargos g ON g.id=a.cargo_id
WHERE a.status='NEW' AND a.pickup_point_id=$1 AND a.dropoff_point_id=$2 AND a.created_at <= $3
ORDER BY a.created_at ASC
`

type ListAvailableForRouteParams struct {
	PickupPointID  int64
	DropoffPointID int64
	CreatedAt      time.Time
}

type ListAvailableForRouteRow struct {
	ID             int64
	TotalWeight    float64
	TotalVolume    float64
	PickupPointID  int64
	DropoffPointID int64
	CreatedAt      time.Time
}

func (q *Queries) ListAvailableForRoute(ctx context.Context, arg ListAvailableForRouteParams) ([]ListAvailableForRouteRow, error) {
	rows, err := q.db.QueryContext(ctx, listAvailableForRoute, arg.PickupPointID, arg.DropoffPointID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAvailableForRouteRow
	for rows.Next() {
		var i ListAvailableForRouteRow
		if err := rows.Scan(
			&i.ID,
			&i.TotalWeight,
			&i.TotalVolume,
			&i.PickupPointID,
			&i.DropoffPointID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
