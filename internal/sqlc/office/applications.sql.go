// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: applications.sql

package officeq

import (
	"context"
	"time"
)

const insertApplication = `-- name: InsertApplication :one
INSERT INTO applications (pickup_point_id, dropoff_point_id, client_id, cargo_id, recipient_id, status)
VALUES ($1,$2,$3,$4,$5,'NEW') RETURNING id
`

type InsertApplicationParams struct {
	PickupPointID  int64
	DropoffPointID int64
	ClientID       int64
	CargoID        int64
	RecipientID    int64
}

func (q *Queries) InsertApplication(ctx context.Context, arg InsertApplicationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertApplication,
		arg.PickupPointID,
		arg.DropoffPointID,
		arg.ClientID,
		arg.CargoID,
		arg.RecipientID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, pickup_point_id, dropoff_point_id, status, created_at
FROM applications
ORDER BY id DESC
`

type ListApplicationsRow struct {
	ID             int64
	PickupPointID  int64
	DropoffPointID int64
	Status         string
	CreatedAt      time.Time
}

func (q *Queries) ListApplications(ctx context.Context) ([]ListApplicationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListApplicationsRow
	for rows.Next() {
		var i ListApplicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.PickupPointID,
			&i.DropoffPointID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApplicationsByStatus = `-- name: ListApplicationsByStatus :many
SELECT id, pickup_point_id, dropoff_point_id, status, created_at
FROM applications
WHERE status=$1
ORDER BY id DESC
`

type ListApplicationsByStatusRow struct {
	ID             int64
	PickupPointID  int64
	DropoffPointID int64
	Status         string
	CreatedAt      time.Time
}

func (q *Queries) ListApplicationsByStatus(ctx context.Context, status string) ([]ListApplicationsByStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, listApplicationsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListApplicationsByStatusRow
	for rows.Next() {
		var i ListApplicationsByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.PickupPointID,
			&i.DropoffPointID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationStatus = `-- name: UpdateApplicationStatus :exec
UPDATE applications
SET status=$2,
    accepted_at = CASE WHEN $2='IN_WORK' THEN now() ELSE accepted_at END,
    dispatched_at = CASE WHEN $2='IN_TRANSIT' THEN now() ELSE dispatched_at END,
    delivered_at = CASE WHEN $2='DELIVERED' THEN now() ELSE delivered_at END
WHERE id=$1
`

type UpdateApplicationStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateApplicationStatus(ctx context.Context, arg UpdateApplicationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicationStatus, arg.ID, arg.Status)
	return err
}
